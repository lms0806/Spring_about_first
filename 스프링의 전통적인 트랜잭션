스프링 시작
1. 톰캣 시작 - 서버작동
2. web.xml
3. context.xml -> DB에 연결 테스트
3.1 request 요청
3.2 web.xml : DB 연결 세션 생성, 트랜잭션 시작, 영속성 컨텍스트 시작
3.3 필터
3.4 스프링 컨테이너 : Controller(요청 확인) : JDBC 커넥션 시작, 트랜잭션 시작-> Service(요청에 맞는 서비스 호출) -> repository(CRUD) 
3.4 영속성 컨텍스트
3.5 DB
3.6 영속성 컨텍스트 : 트랜잭션 종료 후 변경감지 flush
3.7 스프링 컨텍스트 : 트랜잭션 종료, DB연결 세션 종료, 서비스가 종료될 때 영속성 컨텍스트 종료
3.8 response

순서
1. 영속성 컨텍스트 시작
2. JDBC 커넥션 시작
3. 트랜잭션 시작
4. JDBC 커넥션 종료
5. 트랜잭션 종료 - commit - 변경감지 - flush
6. 영속성 컨텍스트 종료

Eager 로딩 : 원하는 정보와 연관되어 있는 정보를 모두 가져온다, 
lazy 로딩(지연 로딩) : 원하는 정보에 해당하는 것만 가져온다, 원하는 정보에 해당되는 이름을 프록시 객체로 가져온다,
영속성 컨텍스트는 controller가 재호출 되기 전이 아닌 response 보내기 전에 종료함, 원하는 정보에 해당되는 내용을 다시 가져와야 하는 경우 프록시 객체의 이름을 이용하여 영속성 컨텍스트에서 다시 가져옴
장점 : 영속성 컨텍스트의 종료를 service시작하기 전과 끝난 후가 아닌 Controller가 시작하기 전과 끝에서 해서 원하는 정보를 다시 가져오기 좋다.
단점 : 트랜잭션이 이미 종료 된 후에 다시 가져오는 경우라 CUD가 전혀 작동하지 않는다.

